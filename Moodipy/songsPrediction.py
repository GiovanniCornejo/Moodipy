# 1. Get a List of Current Popular Songs
# 2. Get the audio features of those songs
# 3. Compare with the audio features of the User's Liked Songs
# 4. If the Audio Features are Similar Enough, add to a new song list for rising popular songs
# 5. Create a Playlist of those songs for the User
# https://open.spotify.com/playlist/37i9dQZEVXbLRQDuF5jeBp?si=fdcc91a25ebc49cc
# https://open.spotify.com/playlist/37i9dQZEVXbLp5XoPON0wI?si=c7fd3101812a4cf0
from SpotifyAuthorization import Authorization
from UserSummary import Person
import requests.exceptions
import spotipy

def songPredictions():
    try:
        user, client = Authorization()
        top_songs = user.get_popular_songs()
        print(len(top_songs))
        new_songs = user.get_newest_songs()
        print(len(new_songs))
        prediction_songs = user.compare_audio_features(client=client, popular_songs=top_songs, new_songs=new_songs)
        print(len(prediction_songs))

        if len(prediction_songs) == 0:
            print("no songs")
            return "NO SONGS"

        tracks = {}
        for track in prediction_songs:
            tracks[track['name']] = track['artists'][0]['name']

        playlist_name = "Next Popular Songs"

        description = "Here are our predictions for the next popular songs! Generated by Moodipy,an app that uses sentiment analysis to create a playlist that matches someone's mood."
        playlist_id = user.create_playlist(playlist_name=playlist_name, description=description)
        print("got playlist id")
        user.add_to_playlist(playlist_id=playlist_id, playlist_tracks=prediction_songs)
        print("checkpoint 3")

        return prediction_songs

    except(spotipy.exceptions.SpotifyException, requests.exceptions.HTTPError, spotipy.oauth2.SpotifyOauthError):
        return None


if __name__ == "__main__":
    songPredictions()
